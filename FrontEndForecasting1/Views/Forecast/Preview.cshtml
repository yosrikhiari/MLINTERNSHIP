@model List<MLINTERNSHIP.SupplyChainData>
@{
    ViewData["Title"] = "Data Preview";
}

<div class="container mt-5">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Data Preview</h2>
                <div>
                    <button type="button" class="btn btn-secondary me-2" onclick="window.location.href='@Url.Action("NewUpload", "Forecast")'">
                        <i class="fas fa-upload me-1"></i>Upload New File
                    </button>
                </div>
            </div>

            <div class="alert alert-info">
                <h5><i class="fas fa-info-circle me-2"></i>File Information</h5>
                <p class="mb-1"><strong>File Name:</strong> @TempData["FileName"]</p>
                <p class="mb-0"><strong>Records Loaded:</strong> @Model.Count</p>
            </div>

            <div class="row mb-4">
                <div class="col-lg-9">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">CSV Data Sample (First 100 rows)</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table id="dataPreviewTable" class="table table-striped table-bordered table-sm">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>SKU</th>
                                            <th>Date</th>
                                            <th>Product Type</th>
                                            <th>Price</th>
                                            <th>Availability</th>
                                            <th>Products Sold</th>
                                            <th>Revenue</th>
                                            <th>Stock Levels</th>
                                            <th>Procurement Lead Time</th>
                                            <th>Shipping Times</th>
                                            <th>Shipping Carriers</th>
                                            <th>Shipping Costs</th>
                                            <th>Supplier Name</th>
                                            <th>Location</th>
                                            <th>Manufacturing Lead Time</th>
                                            <th>Manufacturing Costs</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.Take(100))
                                        {
                                            <tr>
                                                <td>@item.SKU</td>
                                                <td>@item.Date.ToString("yyyy-MM-dd")</td>
                                                <td>@item.ProductType</td>
                                                <td>@item.Price.ToString("C")</td>
                                                <td>@item.Availability</td>
                                                <td>@item.NumberOfProductsSold</td>
                                                <td>@item.RevenueGenerated.ToString("C")</td>
                                                <td>@item.StockLevels</td>
                                                <td>@item.ProcurementLeadTime</td>
                                                <td>@item.ShippingTimes</td>
                                                <td>@item.ShippingCarriers</td>
                                                <td>@item.ShippingCosts.ToString("C")</td>
                                                <td>@item.SupplierName</td>
                                                <td>@item.Location</td>
                                                <td>@item.ManufacturingLeadTime</td>
                                                <td>@item.ManufacturingCosts.ToString("C")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            @if (Model.Count > 100)
                            {
                                <div class="alert alert-info mt-3">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Showing first 100 rows of @Model.Count total records. All data will be used for forecasting.
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="card h-100">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0"><i class="fas fa-ruler me-2"></i>Column Units & Types</h6>
                        </div>
                        <div class="card-body p-2" style="max-height: 600px; overflow-y: auto;">
                            <div class="table-responsive">
                                <table class="table table-sm table-borderless mb-0">
                                    <tbody>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">SKU</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Text</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Date</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">YYYY-MM-DD</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Product Type</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Category</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Price</td>
                                            <td class="text-muted" style="font-size: 0.75rem;"> $ </td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Availability</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">%</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Products Sold</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Units</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Revenue</td>
                                            <td class="text-muted" style="font-size: 0.75rem;"> $ </td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Stock Levels</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Units</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Procurement Lead Time</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Days</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Shipping Times</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Number</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Shipping Carriers</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Text</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Shipping Costs</td>
                                            <td class="text-muted" style="font-size: 0.75rem;"> $ </td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Supplier Name</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Text</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Location</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">City</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Manufacturing Lead Time</td>
                                            <td class="text-muted" style="font-size: 0.75rem;">Days</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold text-truncate" style="font-size: 0.8rem;">Manufacturing Costs</td>
                                            <td class="text-muted" style="font-size: 0.75rem;"> $ </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="card-footer bg-light p-2">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Units for all @Model.Select(x => x.SKU).Distinct().Count() unique products
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Data Summary</h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-unstyled mb-0">
                                <li><strong>Total Records:</strong> @Model.Count</li>
                                <li><strong>Unique Products:</strong> @Model.Select(x => x.SKU).Distinct().Count()</li>
                                <li><strong>Date Range:</strong> @Model.Min(x => x.Date).ToString("yyyy-MM-dd") to @Model.Max(x => x.Date).ToString("yyyy-MM-dd")</li>
                                <li><strong>Total Sales:</strong> @Model.Sum(x => x.NumberOfProductsSold).ToString("N0")</li>
                                <li><strong>Total Revenue:</strong> @Model.Sum(x => x.RevenueGenerated).ToString("C")</li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Forecasting Options</h6>
                        </div>
                        <div class="card-body">
                            <form asp-action="Predict" method="post">
                                @Html.AntiForgeryToken()

                                <!-- Time Unit Selection -->
                                <div class="mb-3">
                                    <label class="form-label">Forecast Unit</label>
                                    <select class="form-select" id="forecastUnit" name="unit" onchange="updatePeriodLimits()">
                                        <option value="Days" selected>Days</option>
                                        <option value="Weeks">Weeks</option>
                                        <option value="Months">Months</option>
                                    </select>
                                    <div class="form-text">Choose the time unit for forecasting</div>
                                </div>

                                <!-- Period Selection -->
                                <div class="mb-3">
                                    <label class="form-label">Forecast Period</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="forecastQuantity" name="quantity" value="7" min="1" max="90">
                                        <span class="input-group-text" id="unitLabel">days</span>
                                    </div>
                                    <div class="form-text" id="periodHelp">Number of days to forecast ahead (max 90)</div>
                                    <div class="form-text text-info" id="periodPreview">Forecast period: 7 days</div>
                                </div>

                                <!-- Hidden field for horizon calculation (will be calculated client-side) -->
                                <input type="hidden" id="horizonDays" name="horizon" value="7">

                                <div class="d-grid">
                                    <button type="submit" class="btn btn-success btn-lg" id="predictBtn">
                                        <span id="predictSpinner" class="spinner-border spinner-border-sm me-2" style="display: none;"></span>
                                        <i class="fas fa-chart-line me-2"></i>
                                        Generate Forecast
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <script>
                    function updatePeriodLimits() {
                        const unitSelect = document.getElementById('forecastUnit');
                        const quantityInput = document.getElementById('forecastQuantity');
                        const unitLabel = document.getElementById('unitLabel');
                        const periodHelp = document.getElementById('periodHelp');
                        const horizonInput = document.getElementById('horizonDays');
                        const periodPreview = document.getElementById('periodPreview');

                        const unit = unitSelect.value;
                        let maxValue, helpText, labelText;

                        switch(unit) {
                            case 'Days':
                                maxValue = 90;
                                helpText = 'Number of days to forecast ahead (max 90)';
                                labelText = 'days';
                                break;
                            case 'Weeks':
                                maxValue = 52;
                                helpText = 'Number of weeks to forecast ahead (max 52)';
                                labelText = 'weeks';
                                break;
                            case 'Months':
                                maxValue = 12;
                                helpText = 'Number of months to forecast ahead (max 12)';
                                labelText = 'months';
                                break;
                        }

                        quantityInput.max = maxValue;
                        unitLabel.textContent = labelText;
                        periodHelp.textContent = helpText;

                        // Reset quantity if it exceeds the new max
                        if (parseInt(quantityInput.value) > maxValue) {
                            quantityInput.value = Math.min(maxValue, unit === 'Days' ? 7 : unit === 'Weeks' ? 4 : 1);
                        }

                        updateHorizonAndPreview();
                    }

                    function updateHorizonAndPreview() {
                        const unit = document.getElementById('forecastUnit').value;
                        const quantity = parseInt(document.getElementById('forecastQuantity').value) || 1;
                        const horizonInput = document.getElementById('horizonDays');
                        const periodPreview = document.getElementById('periodPreview');

                        let horizonDays;
                        let previewText;

                        switch(unit) {
                            case 'Days':
                                horizonDays = quantity;
                                previewText = `Forecast period: ${quantity} day${quantity > 1 ? 's' : ''}`;
                                break;
                            case 'Weeks':
                                horizonDays = quantity * 7;
                                previewText = `Forecast period: ${quantity} week${quantity > 1 ? 's' : ''} (${horizonDays} days)`;
                                break;
                            case 'Months':
                                // Approximate months as 30 days each for simplicity
                                horizonDays = quantity * 30;
                                previewText = `Forecast period: ${quantity} month${quantity > 1 ? 's' : ''} (approx ${horizonDays} days)`;
                                break;
                        }

                        horizonInput.value = horizonDays;
                        periodPreview.textContent = previewText;
                    }

                    // Initialize on page load
                    document.addEventListener('DOMContentLoaded', function() {
                        updatePeriodLimits();

                        // Add event listener for quantity changes
                        document.getElementById('forecastQuantity').addEventListener('input', updateHorizonAndPreview);
                    });
                </script>
            </div>
        </div>
    </div>
</div>

<!-- Include necessary CSS and JS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>

<script>
    $(document).ready(function() {
        // Initialize DataTable
        $('#dataPreviewTable').DataTable({
            "pageLength": 10,
            "order": [[0, "asc"]],
            "scrollX": true,
            "responsive": true,
            "dom": 'Bfrtip',
            "language": {
                "search": "Search data:",
                "lengthMenu": "Show _MENU_ entries"
            }
        });

        // Handle form submission
        $('form[asp-action="Predict"]').on('submit', function() {
            const predictBtn = $('#predictBtn');
            const spinner = $('#predictSpinner');

            predictBtn.prop('disabled', true);
            spinner.show();
            predictBtn.html('<span class="spinner-border spinner-border-sm me-2"></span>Processing Forecast...');
        });
    });
</script>