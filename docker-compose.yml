services:
  # Machine Learning Model Service
  ml-model-service:
    build:
      context: ./MLINTERNSHIP
      dockerfile: Dockerfile
      network: host
    container_name: mlinternship
    ports:
      - "5000:5000"
    environment:
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
    volumes:
      - ./supply_chain_data.csv:/app/data/supply_chain_data.csv:ro
      - mlinternship_data:/app/data
      - mlinternship_logs:/app/logs
    networks:
      - forecasting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  
  # Frontend Forecasting Application
  frontend-forecasting:
    build:
      context: .
      dockerfile: FrontEndForecasting1/Dockerfile
      network: host
    container_name: frontend-forecasting
    ports:
      - "8088:80"
      - "8443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - LD_LIBRARY_PATH=/app:/app/runtimes/linux-x64/native:/usr/lib:/usr/local/lib
      - REDIS__CONFIGURATION=redis:6379,abortConnect=false
    volumes:
      - ./FrontEndForecasting1/appsettings.json:/app/appsettings.json:ro
      - ./FrontEndForecasting1/appsettings.Production.json:/app/appsettings.Production.json:ro
    networks:
      - forecasting-network
    restart: unless-stopped
    depends_on:
      - ml-model-service
      - redis
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s  # Increased start period

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - forecasting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - forecasting-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"] 
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - forecasting-network
    restart: unless-stopped

  # Redis Exporter for monitoring
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - forecasting-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9121/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  mlinternship_data:
    driver: local
  mlinternship_logs:
    driver: local
  redis_data:
    driver: local

networks:
  forecasting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
